"""empty message

Revision ID: 30f135dfc02d
Revises: c56c1ed87079
Create Date: 2025-04-01 12:05:30.469021

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "30f135dfc02d"
down_revision: Union[str, None] = "c56c1ed87079"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("product_hall_styles")
    op.drop_table("product_hall_venue_type_links")
    op.drop_table("product_hall_types")
    op.drop_table("product_hall_style_links")
    op.drop_table("product_hall_food_types")
    op.drop_table("product_hall_venues")
    op.add_column(
        "product_halls", sa.Column("elevator_count", sa.Integer(), nullable=False)
    )
    op.add_column("product_halls", sa.Column("atm_count", sa.Integer(), nullable=False))
    op.add_column(
        "product_halls",
        sa.Column("contain_family_waiting_room", sa.Boolean(), nullable=False),
    )
    op.add_column(
        "product_halls", sa.Column("contain_pyebaek_room", sa.Boolean(), nullable=False)
    )
    op.drop_column("product_halls", "atm")
    op.drop_column("product_halls", "family_waiting_room")
    op.drop_column("product_halls", "elevator")
    op.drop_column("product_halls", "pyebaek_room")
    ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "product_halls",
        sa.Column("pyebaek_room", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "product_halls",
        sa.Column("elevator", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "product_halls",
        sa.Column(
            "family_waiting_room", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "product_halls",
        sa.Column("atm", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.drop_column("product_halls", "contain_pyebaek_room")
    op.drop_column("product_halls", "contain_family_waiting_room")
    op.drop_column("product_halls", "atm_count")
    op.drop_column("product_halls", "elevator_count")
    op.create_table(
        "product_hall_venues",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('product_hall_venues_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("product_hall_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "wedding_interval", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("wedding_times", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "wedding_type", sa.VARCHAR(length=10), autoincrement=False, nullable=False
        ),
        sa.Column(
            "guaranteed_min_count", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("min_capacity", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("max_capacity", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("basic_price", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "peak_season_price", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("ceiling_height", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "virgin_road_length", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("include_drink", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("include_alcohol", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "include_service_fee", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column("include_vat", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "bride_room_entry_methods",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "bride_room_makeup_room", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column("food_type_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "food_cost_per_adult", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "food_cost_per_child", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "banquet_hall_running_time",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "banquet_hall_max_capacity",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "additional_info",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "special_notes", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("is_deleted", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_datetime",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_datetime",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_datetime",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["food_type_id"],
            ["product_hall_food_types.id"],
            name="product_hall_venues_food_type_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["product_hall_id"],
            ["product_halls.id"],
            name="product_hall_venues_product_hall_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="product_hall_venues_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "product_hall_food_types",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('product_hall_food_types_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="product_hall_food_types_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "product_hall_style_links",
        sa.Column("venue_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("hall_style_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["hall_style_id"],
            ["product_hall_styles.id"],
            name="product_hall_style_links_hall_style_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["venue_id"],
            ["product_hall_venues.id"],
            name="product_hall_style_links_venue_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "venue_id", "hall_style_id", name="product_hall_style_links_pkey"
        ),
    )
    op.create_table(
        "product_hall_types",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('product_hall_types_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="product_hall_types_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "product_hall_venue_type_links",
        sa.Column("venue_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("hall_type_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["hall_type_id"],
            ["product_hall_types.id"],
            name="product_hall_venue_type_links_hall_type_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["venue_id"],
            ["product_hall_venues.id"],
            name="product_hall_venue_type_links_venue_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "venue_id", "hall_type_id", name="product_hall_venue_type_links_pkey"
        ),
    )
    op.create_table(
        "product_hall_styles",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="product_hall_styles_pkey"),
    )
    # ### end Alembic commands ###
